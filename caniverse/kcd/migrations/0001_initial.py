# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-15 01:26
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import kcd.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('baudrate', models.IntegerField(default=500000, validators=[kcd.validators.RangeValidator(5000, 1000000, code='baud_rate', message='Baud rate must be between %(lower)s and %(upper)s. (it is %(value)s).')])),
            ],
        ),
        migrations.CreateModel(
            name='Consumer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Describes the scope of application e.g. the target vehicle or controlled device.')),
                ('version', models.TextField(help_text='The version of the network definition document.')),
                ('author', models.TextField(help_text='The owner or author of the network definition document.')),
                ('company', models.TextField(help_text='The owner company of the network definition document.')),
                ('date', models.TextField(help_text='The release date of this version of the network definition document.')),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Human-readable name for this value.')),
                ('label_type', models.CharField(default='value', help_text='Type of value: "value", "invalid" or "error".', max_length=7)),
                ('value', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='Must be non-negative, was %(value)s')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabelGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Human-readable name for this value.')),
                ('label_type', models.CharField(default='value', help_text='Type of value: "value", "invalid" or "error".', max_length=7)),
                ('raw_from', models.PositiveIntegerField()),
                ('raw_to', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabelSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.TextField(validators=[django.core.validators.RegexValidator(regex='0x[A-F0-9]+')])),
                ('name', models.TextField()),
                ('length', models.CharField(max_length=4, validators=[django.core.validators.RegexValidator(regex='r([0-8])|(auto)')])),
                ('interval', models.PositiveIntegerField(default=0, validators=[kcd.validators.RangeValidator(0, 60000, code='interval')])),
                ('triggered', models.BooleanField(default=False)),
                ('count', models.PositiveIntegerField(default=0)),
                ('format', models.CharField(default='standard', max_length=8, validators=[django.core.validators.RegexValidator(regex='(standard)|(extended)')])),
                ('remote', models.BooleanField(default=False)),
                ('bus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.Bus')),
            ],
        ),
        migrations.CreateModel(
            name='Multiplex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endianess', models.CharField(choices=[('little', 'little'), ('big', 'big')], default='little', help_text='Determines if Byteorder is big-endian (Motorola), little-endian (Intel) otherwise.', max_length=6)),
                ('length', models.IntegerField(default=1, help_text='Bit length of the signal.', validators=[kcd.validators.RangeValidator(1, 64)])),
                ('name', models.TextField(help_text='Human readable name of the signal.')),
                ('offset', models.IntegerField(help_text='Least significant bit offset of the signal relative to the least significant bit of the messages data payload.', validators=[kcd.validators.RangeValidator(0, 63)])),
                ('consumer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kcd.Consumer')),
                ('label_set', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kcd.LabelSet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MuxGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('multiplex', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.Multiplex')),
            ],
        ),
        migrations.CreateModel(
            name='NetworkDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.TextField(help_text='Unique identifier of the network node.')),
                ('name', models.TextField(blank=True, help_text='Human-readable name of the network node (e.g. "Brake").', null=True, unique=True)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.NetworkDefinition')),
            ],
        ),
        migrations.CreateModel(
            name='NodeRef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.TextField(help_text='Referencing a network node by its unique identifier.')),
                ('consumer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.Consumer')),
                ('node_deref', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kcd.Node')),
            ],
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Producer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.Message')),
            ],
        ),
        migrations.CreateModel(
            name='Signal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endianess', models.CharField(choices=[('little', 'little'), ('big', 'big')], default='little', help_text='Determines if Byteorder is big-endian (Motorola), little-endian (Intel) otherwise.', max_length=6)),
                ('length', models.IntegerField(default=1, help_text='Bit length of the signal.', validators=[kcd.validators.RangeValidator(1, 64)])),
                ('name', models.TextField(help_text='Human readable name of the signal.')),
                ('offset', models.IntegerField(help_text='Least significant bit offset of the signal relative to the least significant bit of the messages data payload.', validators=[kcd.validators.RangeValidator(0, 63)])),
                ('consumers', models.ManyToManyField(to='kcd.Consumer')),
                ('label_set', models.ManyToManyField(to='kcd.LabelSet')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.Signal')),
                ('muxgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.MuxGroup')),
                ('notes', models.ManyToManyField(to='kcd.Notes')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('unsigned', 'unsigned'), ('signed', 'signed'), ('single', 'IEEE754 Single'), ('double', 'IEEE754 Double')], default='unsigned', help_text='Datatype of the value', max_length=8, null=True, validators=[django.core.validators.RegexValidator('(unsigned)|(signed)|(single)|(double)')])),
                ('slope', models.FloatField(default=1, help_text='The slope "m" of a linear equation y = mx + b.')),
                ('intercept', models.FloatField(default=0, help_text='The y-axis intercept "b" of a linear equation y = mx + b.')),
                ('unit', models.TextField(help_text='Physical unit of the value written as unit term as described in "The Unified Code for Units of Measure" (http://unitsofmeasure.org/ucum.html)')),
                ('min', models.FloatField(default=0, help_text='Lower validity limit of the interpreted value after using the slope/intercept equation.')),
                ('max', models.FloatField(default=1, help_text='Upper validity limit of the interpreted value after using the slope/intercept equation.')),
            ],
        ),
        migrations.CreateModel(
            name='Var',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('notes', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='kcd.Notes')),
                ('value', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kcd.Value')),
            ],
        ),
        migrations.AddField(
            model_name='signal',
            name='values',
            field=models.ManyToManyField(to='kcd.Value'),
        ),
        migrations.AddField(
            model_name='noderef',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.Producer'),
        ),
        migrations.AddField(
            model_name='multiplex',
            name='notes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kcd.Notes'),
        ),
        migrations.AddField(
            model_name='multiplex',
            name='value',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kcd.Value'),
        ),
        migrations.AddField(
            model_name='message',
            name='note',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kcd.Notes'),
        ),
        migrations.AddField(
            model_name='labelgroup',
            name='label_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.LabelSet'),
        ),
        migrations.AddField(
            model_name='label',
            name='label_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.LabelSet'),
        ),
        migrations.AddField(
            model_name='document',
            name='network_definition',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='document', to='kcd.NetworkDefinition'),
        ),
        migrations.AddField(
            model_name='bus',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kcd.NetworkDefinition'),
        ),
    ]
